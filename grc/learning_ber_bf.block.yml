id: learning_ber_bf
label: BER (learning)
category: '[learning]'

templates:
  imports: import learning
  make: learning.ber_bf(${test_mode}, ${berminerrors}, ${ber_limit}, ${bitsperbyte})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
-   id: bitsperbyte
    label: Bits/byte
    dtype: int
    default: '8'
    hide: ${'part' if bitsperbyte == 8 else 'none'}
-   id: test_mode
    label: Test Mode
    dtype: enum
    default: 'False'
    options: ['False', 'True']
-   id: berminerrors
    label: BER Min. Errors
    dtype: int
    default: '100'
    hide: ${ 'part' if test_mode == 'True' else 'all' }
-   id: ber_limit
    label: BER Limit
    dtype: float
    default: '-7.0'
    hide: ${ 'part' if test_mode == 'True' else 'all' }

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
-   label: in0
    domain: stream
    dtype: byte
-   label: in1
    domain: stream
    dtype: byte

outputs:
-   domain: stream
    dtype: float

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
