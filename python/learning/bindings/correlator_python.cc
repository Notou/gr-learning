/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually
 * edited  */
/* The following lines can be configured to regenerate this file during cmake */
/* If manual edits are made, the following tags should be modified accordingly.
 */
/* BINDTOOL_GEN_AUTOMATIC(0) */
/* BINDTOOL_USE_PYGCCXML(0) */
/* BINDTOOL_HEADER_FILE(correlator.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(118fa29257a2e6ffa5d07b6f4244d159) */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/learning/correlator.h>
// pydoc.h is automatically generated in the build directory
#include <correlator_pydoc.h>

void bind_correlator(py::module &m) {

  using correlator = ::gr::learning::correlator;

  py::enum_<gr::learning::correlator::tm_type>(m, "tm_type")
  .value("THRESHOLD_DYNAMIC", gr::learning::correlator::THRESHOLD_DYNAMIC)   // 0
  .value("THRESHOLD_ABSOLUTE", gr::learning::correlator::THRESHOLD_ABSOLUTE) // 1
  .export_values();

  py::implicitly_convertible<int, gr::learning::correlator::tm_type>();

  py::class_<correlator, gr::sync_block, gr::block, gr::basic_block,
             std::shared_ptr<correlator>>(m, "correlator", D(correlator))

      .def(py::init(&correlator::make), py::arg("symbols"), py::arg("sps"),
           py::arg("mark_delay"), py::arg("threshold") = 0.90000000000000002,
           py::arg("threshold_method") =
               ::gr::learning::correlator::tm_type::THRESHOLD_ABSOLUTE,
           D(correlator, make))

      .def("symbols", &correlator::symbols, D(correlator, symbols))

      .def("set_symbols", &correlator::set_symbols, py::arg("symbols"),
           D(correlator, set_symbols))

      .def("mark_delay", &correlator::mark_delay, D(correlator, mark_delay))

      .def("set_mark_delay", &correlator::set_mark_delay, py::arg("mark_delay"),
           D(correlator, set_mark_delay))

      .def("threshold", &correlator::threshold, D(correlator, threshold))

      .def("set_threshold", &correlator::set_threshold, py::arg("threshold"),
           D(correlator, set_threshold))

      ;
}
